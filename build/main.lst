ARM GAS  /tmp/ccOccm9x.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemClock_Config,"ax",%progbits
  18              		.align	1
  19              		.global	SystemClock_Config
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	SystemClock_Config:
  27              	.LFB134:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "tim.h"
  24:Src/main.c    **** #include "usart.h"
  25:Src/main.c    **** #include "gpio.h"
  26:Src/main.c    **** 
  27:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.c    **** /* USER CODE BEGIN Includes */
  29:Src/main.c    **** #include "stdio.h"
  30:Src/main.c    **** #include "stdlib.h"
ARM GAS  /tmp/ccOccm9x.s 			page 2


  31:Src/main.c    **** #include "retarget.h"
  32:Src/main.c    **** #include "PwmDriver.h"
  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END Includes */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* USER CODE END PTD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PD */
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE BEGIN PV */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE END PV */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  57:Src/main.c    **** void SystemClock_Config(void);
  58:Src/main.c    **** /* USER CODE BEGIN PFP */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE END PFP */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  63:Src/main.c    **** /* USER CODE BEGIN 0 */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE END 0 */
  66:Src/main.c    **** 
  67:Src/main.c    **** /**
  68:Src/main.c    ****   * @brief  The application entry point.
  69:Src/main.c    ****   * @retval int
  70:Src/main.c    ****   */
  71:Src/main.c    **** int main(void)
  72:Src/main.c    **** {
  73:Src/main.c    ****   /* USER CODE BEGIN 1 */
  74:Src/main.c    ****   char buf[100];
  75:Src/main.c    **** 
  76:Src/main.c    ****   /* USER CODE END 1 */
  77:Src/main.c    ****   
  78:Src/main.c    **** 
  79:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  82:Src/main.c    ****   HAL_Init();
  83:Src/main.c    **** 
  84:Src/main.c    ****   /* USER CODE BEGIN Init */
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* USER CODE END Init */
  87:Src/main.c    **** 
ARM GAS  /tmp/ccOccm9x.s 			page 3


  88:Src/main.c    ****   /* Configure the system clock */
  89:Src/main.c    ****   SystemClock_Config();
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE END SysInit */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* Initialize all configured peripherals */
  96:Src/main.c    ****   MX_GPIO_Init();
  97:Src/main.c    ****   MX_USART2_UART_Init();
  98:Src/main.c    ****   MX_TIM2_Init();
  99:Src/main.c    ****   /* USER CODE BEGIN 2 */
 100:Src/main.c    **** 
 101:Src/main.c    ****   RetargetInit(&huart2);
 102:Src/main.c    ****   PWMDriver_Enable(&htim2);
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* USER CODE END 2 */
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* Infinite loop */
 107:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 108:Src/main.c    ****   while (1)
 109:Src/main.c    ****   {printf("\r\nDuty Cycle?: ");
 110:Src/main.c    ****     scanf("%s", buf);
 111:Src/main.c    ****     printf("\r\nI'll run things at, %s Pulses!\r\n", buf);
 112:Src/main.c    ****     uint16_t duty = atoi(buf);
 113:Src/main.c    ****     printf("\r\nI'm sending %d to the Driver!\r\n", duty);
 114:Src/main.c    ****     PWMDriver_ChangeDutyCycle(&htim2, duty);
 115:Src/main.c    ****     /* USER CODE END WHILE */
 116:Src/main.c    **** 
 117:Src/main.c    ****     /* USER CODE BEGIN 3 */
 118:Src/main.c    ****   }
 119:Src/main.c    ****   /* USER CODE END 3 */
 120:Src/main.c    **** }
 121:Src/main.c    **** 
 122:Src/main.c    **** /**
 123:Src/main.c    ****   * @brief System Clock Configuration
 124:Src/main.c    ****   * @retval None
 125:Src/main.c    ****   */
 126:Src/main.c    **** void SystemClock_Config(void)
 127:Src/main.c    **** {
  29              		.loc 1 127 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 176
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 ACB0     		sub	sp, sp, #176
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 192
 128:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  43              		.loc 1 128 3 view .LVU1
  44              		.loc 1 128 22 is_stmt 0 view .LVU2
ARM GAS  /tmp/ccOccm9x.s 			page 4


  45 0004 4422     		movs	r2, #68
  46 0006 0021     		movs	r1, #0
  47 0008 1BA8     		add	r0, sp, #108
  48 000a FFF7FEFF 		bl	memset
  49              	.LVL0:
 129:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  50              		.loc 1 129 3 is_stmt 1 view .LVU3
  51              		.loc 1 129 22 is_stmt 0 view .LVU4
  52 000e 0024     		movs	r4, #0
  53 0010 1694     		str	r4, [sp, #88]
  54 0012 1794     		str	r4, [sp, #92]
  55 0014 1894     		str	r4, [sp, #96]
  56 0016 1994     		str	r4, [sp, #100]
  57 0018 1A94     		str	r4, [sp, #104]
 130:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  58              		.loc 1 130 3 is_stmt 1 view .LVU5
  59              		.loc 1 130 28 is_stmt 0 view .LVU6
  60 001a 5422     		movs	r2, #84
  61 001c 2146     		mov	r1, r4
  62 001e 01A8     		add	r0, sp, #4
  63 0020 FFF7FEFF 		bl	memset
  64              	.LVL1:
 131:Src/main.c    **** 
 132:Src/main.c    ****   /** Configure LSE Drive Capability 
 133:Src/main.c    ****   */
 134:Src/main.c    ****   HAL_PWR_EnableBkUpAccess();
  65              		.loc 1 134 3 is_stmt 1 view .LVU7
  66 0024 FFF7FEFF 		bl	HAL_PWR_EnableBkUpAccess
  67              	.LVL2:
 135:Src/main.c    ****   __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  68              		.loc 1 135 3 view .LVU8
  69 0028 194A     		ldr	r2, .L3
  70 002a D2F89030 		ldr	r3, [r2, #144]
  71 002e 23F01803 		bic	r3, r3, #24
  72 0032 C2F89030 		str	r3, [r2, #144]
 136:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 137:Src/main.c    ****   */
 138:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  73              		.loc 1 138 3 view .LVU9
  74              		.loc 1 138 36 is_stmt 0 view .LVU10
  75 0036 1423     		movs	r3, #20
  76 0038 1B93     		str	r3, [sp, #108]
 139:Src/main.c    ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  77              		.loc 1 139 3 is_stmt 1 view .LVU11
  78              		.loc 1 139 30 is_stmt 0 view .LVU12
  79 003a 0125     		movs	r5, #1
  80 003c 1D95     		str	r5, [sp, #116]
 140:Src/main.c    ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  81              		.loc 1 140 3 is_stmt 1 view .LVU13
  82              		.loc 1 140 30 is_stmt 0 view .LVU14
  83 003e 2195     		str	r5, [sp, #132]
 141:Src/main.c    ****   RCC_OscInitStruct.MSICalibrationValue = 0;
  84              		.loc 1 141 3 is_stmt 1 view .LVU15
  85              		.loc 1 141 41 is_stmt 0 view .LVU16
  86 0040 2294     		str	r4, [sp, #136]
 142:Src/main.c    ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  87              		.loc 1 142 3 is_stmt 1 view .LVU17
ARM GAS  /tmp/ccOccm9x.s 			page 5


  88              		.loc 1 142 35 is_stmt 0 view .LVU18
  89 0042 6023     		movs	r3, #96
  90 0044 2393     		str	r3, [sp, #140]
 143:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  91              		.loc 1 143 3 is_stmt 1 view .LVU19
  92              		.loc 1 143 34 is_stmt 0 view .LVU20
  93 0046 0226     		movs	r6, #2
  94 0048 2596     		str	r6, [sp, #148]
 144:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  95              		.loc 1 144 3 is_stmt 1 view .LVU21
  96              		.loc 1 144 35 is_stmt 0 view .LVU22
  97 004a 2695     		str	r5, [sp, #152]
 145:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 1;
  98              		.loc 1 145 3 is_stmt 1 view .LVU23
  99              		.loc 1 145 30 is_stmt 0 view .LVU24
 100 004c 2795     		str	r5, [sp, #156]
 146:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 16;
 101              		.loc 1 146 3 is_stmt 1 view .LVU25
 102              		.loc 1 146 30 is_stmt 0 view .LVU26
 103 004e 1023     		movs	r3, #16
 104 0050 2893     		str	r3, [sp, #160]
 147:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 105              		.loc 1 147 3 is_stmt 1 view .LVU27
 106              		.loc 1 147 30 is_stmt 0 view .LVU28
 107 0052 0723     		movs	r3, #7
 108 0054 2993     		str	r3, [sp, #164]
 148:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 109              		.loc 1 148 3 is_stmt 1 view .LVU29
 110              		.loc 1 148 30 is_stmt 0 view .LVU30
 111 0056 2A96     		str	r6, [sp, #168]
 149:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 112              		.loc 1 149 3 is_stmt 1 view .LVU31
 113              		.loc 1 149 30 is_stmt 0 view .LVU32
 114 0058 2B96     		str	r6, [sp, #172]
 150:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 115              		.loc 1 150 3 is_stmt 1 view .LVU33
 116              		.loc 1 150 7 is_stmt 0 view .LVU34
 117 005a 1BA8     		add	r0, sp, #108
 118 005c FFF7FEFF 		bl	HAL_RCC_OscConfig
 119              	.LVL3:
 151:Src/main.c    ****   {
 152:Src/main.c    ****     Error_Handler();
 153:Src/main.c    ****   }
 154:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 155:Src/main.c    ****   */
 156:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 120              		.loc 1 156 3 is_stmt 1 view .LVU35
 121              		.loc 1 156 31 is_stmt 0 view .LVU36
 122 0060 0F23     		movs	r3, #15
 123 0062 1693     		str	r3, [sp, #88]
 157:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 158:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 124              		.loc 1 158 3 is_stmt 1 view .LVU37
 125              		.loc 1 158 34 is_stmt 0 view .LVU38
 126 0064 0323     		movs	r3, #3
 127 0066 1793     		str	r3, [sp, #92]
 159:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccOccm9x.s 			page 6


 128              		.loc 1 159 3 is_stmt 1 view .LVU39
 129              		.loc 1 159 35 is_stmt 0 view .LVU40
 130 0068 1894     		str	r4, [sp, #96]
 160:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 131              		.loc 1 160 3 is_stmt 1 view .LVU41
 132              		.loc 1 160 36 is_stmt 0 view .LVU42
 133 006a 1994     		str	r4, [sp, #100]
 161:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 134              		.loc 1 161 3 is_stmt 1 view .LVU43
 135              		.loc 1 161 36 is_stmt 0 view .LVU44
 136 006c 1A94     		str	r4, [sp, #104]
 162:Src/main.c    **** 
 163:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 137              		.loc 1 163 3 is_stmt 1 view .LVU45
 138              		.loc 1 163 7 is_stmt 0 view .LVU46
 139 006e 2946     		mov	r1, r5
 140 0070 16A8     		add	r0, sp, #88
 141 0072 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 142              	.LVL4:
 164:Src/main.c    ****   {
 165:Src/main.c    ****     Error_Handler();
 166:Src/main.c    ****   }
 167:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 143              		.loc 1 167 3 is_stmt 1 view .LVU47
 144              		.loc 1 167 38 is_stmt 0 view .LVU48
 145 0076 0196     		str	r6, [sp, #4]
 168:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 146              		.loc 1 168 3 is_stmt 1 view .LVU49
 147              		.loc 1 168 38 is_stmt 0 view .LVU50
 148 0078 0A94     		str	r4, [sp, #40]
 169:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 149              		.loc 1 169 3 is_stmt 1 view .LVU51
 150              		.loc 1 169 7 is_stmt 0 view .LVU52
 151 007a 01A8     		add	r0, sp, #4
 152 007c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 153              	.LVL5:
 170:Src/main.c    ****   {
 171:Src/main.c    ****     Error_Handler();
 172:Src/main.c    ****   }
 173:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 174:Src/main.c    ****   */
 175:Src/main.c    ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 154              		.loc 1 175 3 is_stmt 1 view .LVU53
 155              		.loc 1 175 7 is_stmt 0 view .LVU54
 156 0080 4FF40070 		mov	r0, #512
 157 0084 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 158              	.LVL6:
 176:Src/main.c    ****   {
 177:Src/main.c    ****     Error_Handler();
 178:Src/main.c    ****   }
 179:Src/main.c    ****   /** Enable MSI Auto calibration 
 180:Src/main.c    ****   */
 181:Src/main.c    ****   HAL_RCCEx_EnableMSIPLLMode();
 159              		.loc 1 181 3 is_stmt 1 view .LVU55
 160 0088 FFF7FEFF 		bl	HAL_RCCEx_EnableMSIPLLMode
 161              	.LVL7:
 182:Src/main.c    **** }
ARM GAS  /tmp/ccOccm9x.s 			page 7


 162              		.loc 1 182 1 is_stmt 0 view .LVU56
 163 008c 2CB0     		add	sp, sp, #176
 164              	.LCFI2:
 165              		.cfi_def_cfa_offset 16
 166              		@ sp needed
 167 008e 70BD     		pop	{r4, r5, r6, pc}
 168              	.L4:
 169              		.align	2
 170              	.L3:
 171 0090 00100240 		.word	1073876992
 172              		.cfi_endproc
 173              	.LFE134:
 175              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 176              		.align	2
 177              	.LC0:
 178 0000 0D0A4475 		.ascii	"\015\012Duty Cycle?: \000"
 178      74792043 
 178      79636C65 
 178      3F3A2000 
 179              		.align	2
 180              	.LC1:
 181 0010 257300   		.ascii	"%s\000"
 182 0013 00       		.align	2
 183              	.LC2:
 184 0014 0D0A4927 		.ascii	"\015\012I'll run things at, %s Pulses!\015\012\000"
 184      6C6C2072 
 184      756E2074 
 184      68696E67 
 184      73206174 
 185 0037 00       		.align	2
 186              	.LC3:
 187 0038 0D0A4927 		.ascii	"\015\012I'm sending %d to the Driver!\015\012\000"
 187      6D207365 
 187      6E64696E 
 187      67202564 
 187      20746F20 
 188              		.section	.text.main,"ax",%progbits
 189              		.align	1
 190              		.global	main
 191              		.syntax unified
 192              		.thumb
 193              		.thumb_func
 194              		.fpu fpv4-sp-d16
 196              	main:
 197              	.LFB133:
  72:Src/main.c    ****   /* USER CODE BEGIN 1 */
 198              		.loc 1 72 1 is_stmt 1 view -0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 104
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202 0000 10B5     		push	{r4, lr}
 203              	.LCFI3:
 204              		.cfi_def_cfa_offset 8
 205              		.cfi_offset 4, -8
 206              		.cfi_offset 14, -4
 207 0002 9AB0     		sub	sp, sp, #104
 208              	.LCFI4:
ARM GAS  /tmp/ccOccm9x.s 			page 8


 209              		.cfi_def_cfa_offset 112
  74:Src/main.c    **** 
 210              		.loc 1 74 3 view .LVU58
  82:Src/main.c    **** 
 211              		.loc 1 82 3 view .LVU59
 212 0004 FFF7FEFF 		bl	HAL_Init
 213              	.LVL8:
  89:Src/main.c    **** 
 214              		.loc 1 89 3 view .LVU60
 215 0008 FFF7FEFF 		bl	SystemClock_Config
 216              	.LVL9:
  96:Src/main.c    ****   MX_USART2_UART_Init();
 217              		.loc 1 96 3 view .LVU61
 218 000c FFF7FEFF 		bl	MX_GPIO_Init
 219              	.LVL10:
  97:Src/main.c    ****   MX_TIM2_Init();
 220              		.loc 1 97 3 view .LVU62
 221 0010 FFF7FEFF 		bl	MX_USART2_UART_Init
 222              	.LVL11:
  98:Src/main.c    ****   /* USER CODE BEGIN 2 */
 223              		.loc 1 98 3 view .LVU63
 224 0014 FFF7FEFF 		bl	MX_TIM2_Init
 225              	.LVL12:
 101:Src/main.c    ****   PWMDriver_Enable(&htim2);
 226              		.loc 1 101 3 view .LVU64
 227 0018 0E48     		ldr	r0, .L8
 228 001a FFF7FEFF 		bl	RetargetInit
 229              	.LVL13:
 102:Src/main.c    **** 
 230              		.loc 1 102 3 view .LVU65
 231 001e 0E48     		ldr	r0, .L8+4
 232 0020 FFF7FEFF 		bl	PWMDriver_Enable
 233              	.LVL14:
 234              	.L6:
 108:Src/main.c    ****   {printf("\r\nDuty Cycle?: ");
 235              		.loc 1 108 3 discriminator 1 view .LVU66
 236              	.LBB2:
 109:Src/main.c    ****     scanf("%s", buf);
 237              		.loc 1 109 4 discriminator 1 view .LVU67
 238 0024 0D48     		ldr	r0, .L8+8
 239 0026 FFF7FEFF 		bl	printf
 240              	.LVL15:
 110:Src/main.c    ****     printf("\r\nI'll run things at, %s Pulses!\r\n", buf);
 241              		.loc 1 110 5 discriminator 1 view .LVU68
 242 002a 01A9     		add	r1, sp, #4
 243 002c 0C48     		ldr	r0, .L8+12
 244 002e FFF7FEFF 		bl	scanf
 245              	.LVL16:
 111:Src/main.c    ****     uint16_t duty = atoi(buf);
 246              		.loc 1 111 5 discriminator 1 view .LVU69
 247 0032 01A9     		add	r1, sp, #4
 248 0034 0B48     		ldr	r0, .L8+16
 249 0036 FFF7FEFF 		bl	printf
 250              	.LVL17:
 112:Src/main.c    ****     printf("\r\nI'm sending %d to the Driver!\r\n", duty);
 251              		.loc 1 112 5 discriminator 1 view .LVU70
 112:Src/main.c    ****     printf("\r\nI'm sending %d to the Driver!\r\n", duty);
ARM GAS  /tmp/ccOccm9x.s 			page 9


 252              		.loc 1 112 21 is_stmt 0 discriminator 1 view .LVU71
 253 003a 01A8     		add	r0, sp, #4
 254 003c FFF7FEFF 		bl	atoi
 255              	.LVL18:
 113:Src/main.c    ****     PWMDriver_ChangeDutyCycle(&htim2, duty);
 256              		.loc 1 113 5 is_stmt 1 discriminator 1 view .LVU72
 257 0040 84B2     		uxth	r4, r0
 258 0042 2146     		mov	r1, r4
 259 0044 0848     		ldr	r0, .L8+20
 260              	.LVL19:
 113:Src/main.c    ****     PWMDriver_ChangeDutyCycle(&htim2, duty);
 261              		.loc 1 113 5 is_stmt 0 discriminator 1 view .LVU73
 262 0046 FFF7FEFF 		bl	printf
 263              	.LVL20:
 114:Src/main.c    ****     /* USER CODE END WHILE */
 264              		.loc 1 114 5 is_stmt 1 discriminator 1 view .LVU74
 265 004a 2146     		mov	r1, r4
 266 004c 0248     		ldr	r0, .L8+4
 267 004e FFF7FEFF 		bl	PWMDriver_ChangeDutyCycle
 268              	.LVL21:
 269              	.LBE2:
 108:Src/main.c    ****   {printf("\r\nDuty Cycle?: ");
 270              		.loc 1 108 9 discriminator 1 view .LVU75
 271 0052 E7E7     		b	.L6
 272              	.L9:
 273              		.align	2
 274              	.L8:
 275 0054 00000000 		.word	huart2
 276 0058 00000000 		.word	htim2
 277 005c 00000000 		.word	.LC0
 278 0060 10000000 		.word	.LC1
 279 0064 14000000 		.word	.LC2
 280 0068 38000000 		.word	.LC3
 281              		.cfi_endproc
 282              	.LFE133:
 284              		.section	.text.Error_Handler,"ax",%progbits
 285              		.align	1
 286              		.global	Error_Handler
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu fpv4-sp-d16
 292              	Error_Handler:
 293              	.LFB135:
 183:Src/main.c    **** 
 184:Src/main.c    **** /* USER CODE BEGIN 4 */
 185:Src/main.c    **** 
 186:Src/main.c    **** /* USER CODE END 4 */
 187:Src/main.c    **** 
 188:Src/main.c    **** /**
 189:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 190:Src/main.c    ****   * @retval None
 191:Src/main.c    ****   */
 192:Src/main.c    **** void Error_Handler(void)
 193:Src/main.c    **** {
 294              		.loc 1 193 1 view -0
 295              		.cfi_startproc
ARM GAS  /tmp/ccOccm9x.s 			page 10


 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 194:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 195:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 196:Src/main.c    **** 
 197:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 198:Src/main.c    **** }
 299              		.loc 1 198 1 view .LVU77
 300 0000 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE135:
 304              		.section	.text.assert_failed,"ax",%progbits
 305              		.align	1
 306              		.global	assert_failed
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu fpv4-sp-d16
 312              	assert_failed:
 313              	.LVL22:
 314              	.LFB136:
 199:Src/main.c    **** 
 200:Src/main.c    **** #ifdef  USE_FULL_ASSERT
 201:Src/main.c    **** /**
 202:Src/main.c    ****   * @brief  Reports the name of the source file and the source line number
 203:Src/main.c    ****   *         where the assert_param error has occurred.
 204:Src/main.c    ****   * @param  file: pointer to the source file name
 205:Src/main.c    ****   * @param  line: assert_param error line source number
 206:Src/main.c    ****   * @retval None
 207:Src/main.c    ****   */
 208:Src/main.c    **** void assert_failed(char *file, uint32_t line)
 209:Src/main.c    **** { 
 315              		.loc 1 209 1 view -0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 0
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 319              		@ link register save eliminated.
 210:Src/main.c    ****   /* USER CODE BEGIN 6 */
 211:Src/main.c    ****   /* User can add his own implementation to report the file name and line number,
 212:Src/main.c    ****      tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 213:Src/main.c    ****   /* USER CODE END 6 */
 214:Src/main.c    **** }
 320              		.loc 1 214 1 view .LVU79
 321 0000 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE136:
 325              		.text
 326              	.Letext0:
 327              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 328              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 329              		.file 4 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 330              		.file 5 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 331              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 332              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
 333              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 334              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
ARM GAS  /tmp/ccOccm9x.s 			page 11


 335              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 336              		.file 11 "Inc/tim.h"
 337              		.file 12 "Inc/usart.h"
 338              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr.h"
 339              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
 340              		.file 15 "/usr/arm-none-eabi/include/stdio.h"
 341              		.file 16 "/usr/arm-none-eabi/include/stdlib.h"
 342              		.file 17 "Src/PwmDriver.h"
 343              		.file 18 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 344              		.file 19 "Inc/gpio.h"
 345              		.file 20 "Inc/retarget.h"
 346              		.file 21 "<built-in>"
ARM GAS  /tmp/ccOccm9x.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccOccm9x.s:18     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccOccm9x.s:26     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccOccm9x.s:171    .text.SystemClock_Config:0000000000000090 $d
     /tmp/ccOccm9x.s:176    .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccOccm9x.s:189    .text.main:0000000000000000 $t
     /tmp/ccOccm9x.s:196    .text.main:0000000000000000 main
     /tmp/ccOccm9x.s:275    .text.main:0000000000000054 $d
     /tmp/ccOccm9x.s:285    .text.Error_Handler:0000000000000000 $t
     /tmp/ccOccm9x.s:292    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccOccm9x.s:305    .text.assert_failed:0000000000000000 $t
     /tmp/ccOccm9x.s:312    .text.assert_failed:0000000000000000 assert_failed

UNDEFINED SYMBOLS
memset
HAL_PWR_EnableBkUpAccess
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_PWREx_ControlVoltageScaling
HAL_RCCEx_EnableMSIPLLMode
HAL_Init
MX_GPIO_Init
MX_USART2_UART_Init
MX_TIM2_Init
RetargetInit
PWMDriver_Enable
printf
scanf
atoi
PWMDriver_ChangeDutyCycle
huart2
htim2
